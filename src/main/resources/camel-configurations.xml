<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:broker="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
         http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<bean id="mongoURI" class="com.mongodb.MongoURI">
		<constructor-arg index="0"
			value="mongodb://test:test@ds025180.mlab.com:25180/trainbooking" />
	</bean>

	<bean id="mongoDB" class="com.mongodb.Mongo">
		<constructor-arg index="0" ref="mongoURI" />
	</bean>


	<broker:broker persistent="false" brokerName="broker">
		<broker:transportConnectors>

			<broker:transportConnector name="vm"
				uri="vm://broker" />
			<!-- expose a TCP transport for clients to use <broker:transportConnector 
				name="tcp" uri="tcp://localhost:61610" /> -->
		</broker:transportConnectors>
	</broker:broker>

	<bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="vm://broker" />
	</bean>

	<!-- BEANS -->

	<bean id="missinginputError" class="at.ac.wmpm.trainbooking.processor.MissingInputError" />
	<bean id="requestError" class="at.ac.wmpm.trainbooking.processor.RequestNotFoundError" />
	<bean id="prepareTrain1Offers" class="at.ac.wmpm.trainbooking.processor.PrepareTrain1Offers" />
	<bean id="prepareTrain2Offers" class="at.ac.wmpm.trainbooking.processor.PrepareTrain2Offers" />
	<bean id="preparePathRequestProcessor"
		class="at.ac.wmpm.trainbooking.processor.PreparePathRequestProcessor" />
	<bean id="mapOffers" class="at.ac.wmpm.trainbooking.processor.MapOffers" />
	<bean id="prepareBooking" class="at.ac.wmpm.trainbooking.processor.PrepareBooking" />
	<bean id="bookingError" class="at.ac.wmpm.trainbooking.processor.BookingInputError" />
	<bean id="ticketProcessing" class="at.ac.wmpm.trainbooking.processor.TicketProcessing" />
	<bean id="twitterProcessor" class="at.ac.wmpm.trainbooking.processor.TwitterProcessor" />
	<bean id="createMail" class="at.ac.wmpm.trainbooking.processor.CreateMailTicket" />
	<bean id="stornoProcessor" class="at.ac.wmpm.trainbooking.processor.StornoProcessor">
		<property name="mongo" ref="mongoDB" />
	</bean>
	<bean id="stornoMailProcessor" class="at.ac.wmpm.trainbooking.processor.StornoMailProcessor" />
	<bean id="prepareStornoID" class="at.ac.wmpm.trainbooking.processor.PrepareStornoID">
		<property name="stornoProcessor" ref="stornoProcessor" />
	</bean>
	<bean id="myPrepareProcessor" class="at.ac.wmpm.trainbooking.processor.MyPrepareProcessor" />
	<bean id="deadLetterProcessor" class="at.ac.wmpm.trainbooking.processor.DeadLetterProcessor" />
	<bean id="processOfferInput" class="at.ac.wmpm.trainbooking.processor.ProcessOfferInput" />
	
	<bean id="weatherAggregator" class="at.ac.wmpm.trainbooking.service.WeatherAggregator" />

	<!-- ROUTES -->
	<bean id="appRoute" class="at.ac.wmpm.trainbooking.route.AppRouteBuilder" />
	<bean id="offerRoute" class="at.ac.wmpm.trainbooking.route.OfferRouteBuilder" />
	<bean id="getTrainsRoute" class="at.ac.wmpm.trainbooking.route.GetTrainsRouteBuilder" />
	<bean id="prepareResponse"
		class="at.ac.wmpm.trainbooking.route.PrepareResponseRouteBuilder" />
	<bean id="ticketRoutes" class="at.ac.wmpm.trainbooking.route.TicketRouteBuilder" />
	<bean id="emailTicket" class="at.ac.wmpm.trainbooking.route.EmailTicketRouteBuilder" />
	<bean id="deadLetterRoute" class="at.ac.wmpm.trainbooking.route.DeadLetterRoute" />
	<bean id="prepareWeatherResponse" class="at.ac.wmpm.trainbooking.route.WeatherRouteBuilder" />

	<!-- <bean id="prepResponseRoute" class="at.ac.wmpm.booking.route.PrepareResponseRouteBuilder"/> -->

	<!-- TRAIN1 ROUTES -->
	<bean id="train1Offers" class="at.ac.wmpm.train1.route.Train1OfferRouteBuilder" />
	<bean id="train1Booking" class="at.ac.wmpm.train1.route.BookingRouteBuilder" />

	<!-- TRAIN2 ROUTES -->
	<bean id="train2Offers" class="at.ac.wmpm.train2.route.Train2OfferRouteBuilder" />
	<bean id="train2Booking" class="at.ac.wmpm.train2.route.BookingRouteBuilder" />

	<!-- SERVICES -->
	<bean id="train1Service" class="at.ac.wmpm.train1.service.TrainService" />
	<bean id="train2Service" class="at.ac.wmpm.train2.service.TrainService" />



	<camelContext id="myConfig" xmlns="http://camel.apache.org/schema/spring">
		<routeBuilder ref="appRoute" />
		<routeBuilder ref="offerRoute" />
		<routeBuilder ref="train1Offers" />
		<routeBuilder ref="train2Offers" />
		<routeBuilder ref="prepareResponse" />
		<routeBuilder ref="getTrainsRoute" />
		<routeBuilder ref="train1Offers" />
		<routeBuilder ref="train2Offers" />
		<routeBuilder ref="train1Booking" />
		<routeBuilder ref="train2Booking" />
		<routeBuilder ref="ticketRoutes" />
		<routeBuilder ref="emailTicket" />
		<routeBuilder ref="deadLetterRoute" />
		<routeBuilder ref="prepareWeatherResponse" /> 
		

		<dataFormats>
			<json id="pojo2json" library="Jackson" disableFeatures="FAIL_ON_EMPTY_BEANS" />
			<json id="trainticketJson" library="Jackson"
				unmarshalTypeName="at.ac.wmpm.trainbooking.model.TrainTicket"
				disableFeatures="FAIL_ON_EMPTY_BEANS" />
			<json id="bookingJson" library="Jackson"
				unmarshalTypeName="at.ac.wmpm.trainbooking.model.Booking" />
			<xmljson id="xmljson" />

		</dataFormats>

		<!-- get offers and sort route -->
		<route id="forward-request" streamCache="true">
			<from uri="direct:forward" />
			<process ref="mapOffers" />
			<choice>
				<when>
					<simple>${body} == null</simple>
					<process ref="requestError" />
				</when>
				<otherwise>
				<!-- <pollEnrich timeout="10000"> -->
				<!-- <constant>file:/Users/Malinda/git/WMPM/?fileName=enrich.txt</constant> -->
				<!-- <log message="Where the is the file?" /> -->
				<!-- </pollEnrich> -->
						<enrich strategyRef="weatherAggregator">
							<constant>direct:processWeatherInput</constant>
							<to uri="processInput" />
						</enrich>
				<!-- <aggregate strategyRef="processWeatherInput"> -->
				<!-- <correlationExpression> -->
				<!-- <simple>${headers.to}</simple> -->
				<!-- </correlationExpression> -->
				<!-- </aggregate> -->
				</otherwise>
			</choice>
		</route>

		<route streamCache="true">
			<from uri="direct:getTrain1" />
			<log message="Ich komme in die Camel Config" />
			<to uri="http://localhost:8081/off/" />
			<log message="Response from Train 1: ${body}" />
			<marshal ref="xmljson" />
			<process ref="prepareTrain1Offers" />
			<marshal ref="pojo2json" />
		</route>

		<route streamCache="true">
			<from uri="direct:getTrain2" />
			<log message="Ich komme in die Camel Config 2" />
			<to uri="http://localhost:8082/offer/" />
			<log message="Response from Train 2: ${body}" />
			<process ref="prepareTrain2Offers" />
			<marshal ref="pojo2json" />
		</route>

		<route streamCache="true">
			<from uri="direct:processBooking"></from>
			<log message="is the body null?4: ${body}" />
			<process ref="prepareBooking" />
			<log message="is the body null?3: ${body}" />
			<choice>
				<when>
					<simple>${headers.train} == 'Train1'</simple>
					<to uri="direct:bookTrain1" />
				</when>
				<otherwise>
					<to uri="direct:bookTrain2" />
				</otherwise>
			</choice>
		</route>

		<route streamCache="true">
			<from uri="direct:bookTrain1" />
			<log message="is the body null?2: ${body}" />
			<removeHeaders pattern="CamelHttp*" />
			<setHeader headerName="CamelHttpPath">
				<simple>${headers.bookingId}</simple>
			</setHeader>
			<log message="Check header3: ${headers.offerId}" />
			<log message="Check header2: ${headers.bookingId}" />
			<log message="Check header: ${headers}" />
			<setHeader headerName="CamelHttpMethod">
				<constant>GET</constant>
			</setHeader>
			<setBody>
				<constant>null</constant>
			</setBody>
			<to uri="http://localhost:8081/booking/" />
			<log message="is the body null?1: ${body}" />
			<to uri="direct:taproute" />
		</route>


		<route streamCache="true">
			<from uri="direct:bookTrain2" />
			<log message="is the body null?2: ${body}" />
			<removeHeaders pattern="CamelHttp*" />
			<setHeader headerName="CamelHttpPath">
				<simple>${headers.bookingId}</simple>
			</setHeader>
			<setHeader headerName="CamelHttpMethod">
				<constant>GET</constant>
			</setHeader>
			<setBody>
				<constant>null</constant>
			</setBody>
			<to uri="http://localhost:8082/book/" />
			<log message="is the body null?1: ${body}" />
			<to uri="direct:taproute" />
		</route>

		<route streamCache="true">
			<from uri="direct:taproute" />
			<log message="is the body null?: ${body}" />
			<marshal ref="xmljson" />
			<unmarshal ref="trainticketJson" />
			<choice>
				<when>
					<simple>${body} == null</simple>
					<process ref="bookingError" />
				</when>
				<otherwise>
					<wireTap uri="direct:tap">
						<!-- create the new tap message body and headers -->
						<body>
							<simple>${body.getPrice()}</simple>
						</body>
						<setHeader headerName="ticketID">
							<constant>${headers.Offerid}</constant>
						</setHeader>
						<setHeader headerName="date">
							<simple>${date:now:yyyyMMdd}</simple>
						</setHeader>
					</wireTap>
					<bean ref="ticketProcessing" />

					<wireTap uri="jms:queue:sendOffers" />
				</otherwise>
			</choice>
		</route>

		<route>
			<from uri="jms:queue:sendOffers" />
			<to uri="direct:multicastTickets" />
		</route>


		<route>
			<from uri="direct:multicastTickets" />
			<log message="direct: multicastTickets " />
			<multicast>
				<to uri="direct:persistTicket" />
				<to uri="direct:emailTicket" />
				<!--  <process ref="ticketProcessing" /> -->
				<to uri="direct:twitterTicket" />
			</multicast>

		</route>


		<route id="booked-trains">
			<from uri="direct:tap" />
			<!-- <to uri="direct:twitterTicket" /> -->
			<convertBodyTo type="java.lang.String" />
			<to uri="file://target/provision/?fileName=${header.date}.txt" />
		</route>

		<route id="storno-rest">
			<from uri="direct:storno" />
			<bean ref="stornoProcessor" />
		</route>

		<route id="storno-via-mail">
			<from
				uri="imaps://imap.gmail.com?username=wmpm16.g6@gmail.com&amp;password=wmpm2016&amp;from=wmpm16.g6@gmail.com&amp;unseen=true&amp;consumer.delay=20000" />
			<bean ref="stornoMailProcessor" />
			<to uri="jms:queue:stornoTicket" />
		</route>

		<route id="storno-ticket">
			<from uri="jms:queue:stornoTicket" />
			<bean ref="prepareStornoID" />
		</route>


	</camelContext>
</beans>